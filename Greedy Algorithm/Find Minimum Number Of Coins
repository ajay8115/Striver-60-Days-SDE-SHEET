// APPROACH 1  (DP)

int minCoins(int coins[], int n, int sum)
{
    int t[n + 1][sum + 1];

    for (int i = 0; i < n + 1; i++)
    {
        t[i][0] = 0;
    }

    for (int j = 1; j < sum + 1; j++)
    {
        t[0][j] = INT_MAX - 1;
    }

    for (int i = 1; i < n + 1; i++)
    {
        for (int j = 1; j < sum + 1; j++)
        {
            if (coins[i - 1] <= j)
            {
                t[i][j] = min(1 + t[i][j - coins[i - 1]], t[i - 1][j]);
            }
            else
            {
                t[i][j] = t[i - 1][j];
            }
        }
    }

    if (t[n][sum] == INT_MAX - 1)
    {
        return -1;
    }

    return t[n][sum];
}

/// APPROACH 2 (GREEDY SOLUTION)

int findMinimumCoins(int sum)
{
    int n = 9;
    int arr[] = {1, 2, 5, 10, 20, 50, 100, 500, 1000};

    int coins = 0;

    for (int i = n-1; i >= 0; i--)
    {
        if (sum / arr[i] >= 1)
        {
            coins += (sum / arr[i]);
            sum = sum % arr[i];
        }
        if (sum == 0)
        {
            break;
        }
    }

    return coins;
}
