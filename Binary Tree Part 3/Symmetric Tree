template <typename T>
class BinaryTreeNode
{
public:
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data)
    {
        this->data = data;
        left = NULL;
        right = NULL;
    }

    ~BinaryTreeNode()
    {
        if (left)
            delete left;
        if (right)
            delete right;
    }
};

bool isSymmetric(BinaryTreeNode<int> *root)
{
    BinaryTreeNode<int> *left;
    BinaryTreeNode<int> *right;

    if (!root)
    {
        return true;
    }

    queue<BinaryTreeNode<int> *> q1;
    queue<BinaryTreeNode<int> *> q2;

    q1.push(root->left);
    q2.push(root->right);

    while (!q1.empty() && !q2.empty())
    {
        left = q1.front();
        q1.pop();

        right = q2.front();
        q2.pop();

        if (left == NULL && right == NULL)
        {
            continue;
        }

        if (left == NULL or right == NULL)
        {
            return false;
        }

        if (left->data != right->data)
        {
            return false;
        }

        q1.push(left->left);
        q1.push(left->right);
        q2.push(right->right);
        q2.push(right->left);
    }
    return true;
}
