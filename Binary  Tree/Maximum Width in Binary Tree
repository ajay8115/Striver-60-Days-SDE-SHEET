 // Leetcode Solution 
 class Solution
{
public:
    int widthOfBinaryTree(TreeNode *root)
    {
        if (root == NULL)
        {
            return 0;
        }

        int ans = 1;

        queue<pair<TreeNode *, int>> q;

        q.push({root, 0});

        while (!q.empty())
        {
            int cnt = q.size();
            int start = q.front().second;
            int end = q.back().second;

            ans = max(ans, end - start + 1);

            for (int i = 0; i < cnt; ++i)
            {
                TreeNode *cur = q.front().first;

                int idx = q.front().second - start;

                q.pop();
                if (cur->left)
                {
                    q.push({cur->left, (long long)2 * idx + 1});
                }

                if (cur->right)
                {
                    q.push({cur->right, (long long)2 * idx + 2});
                }
            }
        }

        return ans;
    }
};

// Coding Ninjas solution It's passed all the cases it should not be happen

int getMaxWidth(TreeNode<int> *root)
{

    if (root == NULL)
        return 0;

    queue<TreeNode<int> *> q;

    q.push(root);
    int ans = 0;
    while (!q.empty())
    {
        int n = q.size();
        ans = max(ans, n);

        for (int i = 0; i < n; i++)
        {
            TreeNode<int> *cur = q.front();
            q.pop();
            if (cur->left)
            {
                q.push(cur->left);
            }
            if (cur->right)
            {
                q.push(cur->right);
            }
        }
    }

    return ans;
}

