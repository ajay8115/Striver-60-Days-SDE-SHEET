vector<int> kthSmallLarge(vector<int> &a, int n, int k)
{
    int kthsmallest = 0;
    int kthlargest = 0;

    priority_queue<int> maxheap;
    priority_queue<int, vector<int>, greater<int>> minheap;

    for (int i = 0; i < n; i++)
    {
        maxheap.push(a[i]);
        if (maxheap.size() > k)
        {
            maxheap.pop();
        }
    }

    kthsmallest = maxheap.top();

    for (int i = 0; i < n; i++)
    {
        minheap.push(a[i]);
        if (minheap.size() > k)
        {
            minheap.pop();
        }
    }

    kthlargest = minheap.top();

    vector<int> ans;

    ans.push_back(kthsmallest);
    ans.push_back(kthlargest);


    return ans;
}
