#include <bits/stdc++.h>
#define ll long long int
#define ld long double
#define forn for (int i = 0; i < n; i++)
#define srt(v) sort(v.begin(), v.end());
#define rev(v) reverse(v.begin(), v.end());
#define kk '\n'
using namespace std;

bool dfs(int src, vector<int> adj[], int col[])
{
    if (col[src] == -1)
    {
        col[src] = 1;
    }

    for (auto V : adj[src])
    {
        if (col[V] == -1)
        {
            col[V] = 1 - col[src];
            if (dfs(V, adj, col) == false)
            {
                return false;
            }
        }
        else if (col[V] == col[src])
        {
            return false;
        }
    }

    return true;
}
bool isGraphBirpatite(vector<vector<int>> &edges)
{
    int n = edges.size();

    vector<int> adj[n];
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (edges[i][j] == 1)
            {
                adj[i].push_back(j);
            }
        }
    }

    int col[n];

    for (int i = 0; i < n; i++)
    {
        col[i] = -1;
    }

    for (int i = 0; i < n; i++)
    {
        if (col[i] == -1)
        {
            if (dfs(i, adj, col) == false)
            {
                return false;
            }
        }
    }

    return true;
}
